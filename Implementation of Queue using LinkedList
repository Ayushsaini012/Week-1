import java.util.*;
public class LinkedListQueue {
    private Node frontNode, rearNode;
    private int queueSize;  
    private class Node {
        int data;
        Node next;
    }

    public LinkedListQueue() {
        frontNode = null;
        rearNode = null;
        queueSize = 0;
    }
 
    public boolean isEmpty() {
        return (queueSize == 0);
    }

    public int dequeue() throws IllegalStateException {
        if (isEmpty()) throw new IllegalArgumentException("Queue is Empty");
        int data = frontNode.data;
        frontNode = frontNode.next;
        if (isEmpty()) {
            rearNode = null;
        }
        queueSize--;
        return data;
    }
    public int first() throws IllegalStateException {
        if (isEmpty()) throw new IllegalArgumentException("Queue is Empty");
        return frontNode.data;
    }
    public int size() {
        return queueSize;
    }

    public void enqueue(int data) {
        Node oldRear = rearNode;
        rearNode = new Node();
        rearNode.data = data;
        rearNode.next = null;
        if (isEmpty()) {
            frontNode = rearNode;
        } else {
            oldRear.next = rearNode;
        }
        queueSize++;
    }

    public static void main(String[] args) {
        LinkedListQueue queue = new LinkedListQueue();
        queue.enqueue(18);
        System.out.println("Element at front :  " + queue.first());
        System.out.println("Element removed from front : " + queue.dequeue());
        System.out.println("Queue is Empty : " + queue.isEmpty());
        queue.enqueue(79);
        queue.enqueue(90);
        System.out.println("Size of the queue : " + queue.size());
        System.out.println("Element removed from front end : " + queue.dequeue());
    }
}              
